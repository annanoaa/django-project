Index: order/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.apps import AppConfig\r\n\r\n\r\nclass OrderConfig(AppConfig):\r\n    default_auto_field = 'django.db.models.BigAutoField'\r\n    name = 'order'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order/apps.py b/order/apps.py
--- a/order/apps.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/order/apps.py	(date 1729169294694)
@@ -4,3 +4,7 @@
 class OrderConfig(AppConfig):
     default_auto_field = 'django.db.models.BigAutoField'
     name = 'order'
+
+    def ready(self):
+        import order.signals
+
Index: order/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\n\r\n# Create your models here.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order/models.py b/order/models.py
--- a/order/models.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/order/models.py	(date 1729168553575)
@@ -1,3 +1,9 @@
 from django.db import models
+from django.conf import settings
 
-# Create your models here.
+class UserCart(models.Model):
+    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='cart')
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return f"Cart for {self.user.username}"
\ No newline at end of file
Index: users/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/users/urls.py b/users/urls.py
new file mode 100644
--- /dev/null	(date 1729180591112)
+++ b/users/urls.py	(date 1729180591112)
@@ -0,0 +1,10 @@
+from django.urls import path
+from . import views
+from django.contrib.auth import views as auth_views
+
+urlpatterns = [
+    path('register/', views.register, name='register'),
+    path('profile/', views.profile, name='profile'),
+    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
+    path('logout/', auth_views.LogoutView.as_view(template_name='logout.html'), name='logout'),
+]
\ No newline at end of file
Index: templates/register.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/register.html b/templates/register.html
new file mode 100644
--- /dev/null	(date 1729178300975)
+++ b/templates/register.html	(date 1729178300975)
@@ -0,0 +1,17 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Register</title>
+</head>
+<body>
+    <h2>Register</h2>
+    <form method="post">
+        {% csrf_token %}
+        {{ form.as_p }}
+        <button type="submit">Register</button>
+    </form>
+    <p>Already have an account? <a href="{% url 'login' %}">Login here</a></p>
+</body>
+</html>
Index: templates/login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/login.html b/templates/login.html
new file mode 100644
--- /dev/null	(date 1729178355850)
+++ b/templates/login.html	(date 1729178355850)
@@ -0,0 +1,17 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Login</title>
+</head>
+<body>
+    <h2>Login</h2>
+    <form method="post">
+        {% csrf_token %}
+        {{ form.as_p }}
+        <button type="submit">Login</button>
+    </form>
+    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
+</body>
+</html>
\ No newline at end of file
Index: templates/logout.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/logout.html b/templates/logout.html
new file mode 100644
--- /dev/null	(date 1729178377744)
+++ b/templates/logout.html	(date 1729178377744)
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Logged Out</title>
+</head>
+<body>
+    <h2>Logged Out</h2>
+    <p>You have been successfully logged out.</p>
+    <a href="{% url 'login' %}">Login again</a>
+</body>
+</html>
\ No newline at end of file
Index: templates/profile.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/profile.html b/templates/profile.html
new file mode 100644
--- /dev/null	(date 1729178403602)
+++ b/templates/profile.html	(date 1729178403602)
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Logged Out</title>
+</head>
+<body>
+    <h2>Logged Out</h2>
+    <p>You have been successfully logged out.</p>
+    <a href="{% url 'login' %}">Login again</a>
+</body>
+</html>
Index: store/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom .models import Category, Product\r\n\r\nclass CategoryAdmin(admin.ModelAdmin):\r\n    list_display = ('name', 'parent')\r\n    search_fields = ('name',)\r\n    list_filter = ('parent',)\r\n\r\nadmin.site.register(Category, CategoryAdmin)\r\nadmin.site.register(Product)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/store/admin.py b/store/admin.py
--- a/store/admin.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/store/admin.py	(date 1729180591078)
@@ -1,10 +1,23 @@
 from django.contrib import admin
 from .models import Category, Product
 
+@admin.register(Category)
 class CategoryAdmin(admin.ModelAdmin):
-    list_display = ('name', 'parent')
-    search_fields = ('name',)
+    list_display = ('name', 'parent', 'get_products_count')
     list_filter = ('parent',)
+    search_fields = ('name',)
+
+    def get_products_count(self, obj):
+        return obj.products.count()
+    get_products_count.short_description = 'Products Count'
 
-admin.site.register(Category, CategoryAdmin)
-admin.site.register(Product)
+@admin.register(Product)
+class ProductAdmin(admin.ModelAdmin):
+    list_display = ('name', 'price', 'quantity', 'get_categories')
+    list_filter = ('categories',)
+    search_fields = ('name', 'description')
+    filter_horizontal = ('categories',)
+
+    def get_categories(self, obj):
+        return ", ".join([c.name for c in obj.categories.all()])
+    get_categories.short_description = 'Categories'
\ No newline at end of file
Index: order/signals.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order/signals.py b/order/signals.py
new file mode 100644
--- /dev/null	(date 1729180240618)
+++ b/order/signals.py	(date 1729180240618)
@@ -0,0 +1,10 @@
+from django.db.models.signals import post_save
+from django.dispatch import receiver
+from django.conf import settings
+from .models import UserCart
+
+@receiver(post_save, sender=settings.AUTH_USER_MODEL)
+def create_user_cart(sender, instance, created, **kwargs):
+    if created:
+        UserCart.objects.create(user=instance)
+
Index: djangoProject/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for djangoProject project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.1.1.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\nimport os\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-o+9og=*q!2w7ij))1%_@q_@5tcb8(%p!o-011u-7mf5-p#ih5*'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'store',\r\n    'order',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'djangoProject.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates']\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'djangoProject.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\n# Media settings\r\nMEDIA_URL = '/media/'\r\nMEDIA_ROOT = BASE_DIR / 'media'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject/settings.py b/djangoProject/settings.py
--- a/djangoProject/settings.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/djangoProject/settings.py	(date 1729170121575)
@@ -39,7 +39,11 @@
     'django.contrib.staticfiles',
     'store',
     'order',
+    'users',
 ]
+
+# Specify the custom User model
+AUTH_USER_MODEL = 'users.CustomUser'
 
 MIDDLEWARE = [
     'django.middleware.security.SecurityMiddleware',
@@ -128,3 +132,4 @@
 # Media settings
 MEDIA_URL = '/media/'
 MEDIA_ROOT = BASE_DIR / 'media'
+
Index: store/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.core.paginator import Paginator\r\nfrom django.shortcuts import render, get_object_or_404\r\nfrom django.http import JsonResponse\r\nfrom .models import Category, Product\r\nfrom django.db.models import Count, Sum, F, Max, Min, Avg, Q\r\n\r\n\r\ndef store_home(request):\r\n    return render(request, 'store_home.html')\r\n\r\ndef all_categories(request):\r\n    categories = Category.objects.filter(parent__isnull=True).annotate(\r\n        product_count=Count('products', distinct=True) +\r\n                      Count('children__products', distinct=True) +\r\n                      Count('children__children__products', distinct=True)\r\n    ).values('id', 'name', 'product_count')\r\n    return JsonResponse(list(categories), safe=False)\r\n\r\ndef category_products(request, category_id):\r\n    category = get_object_or_404(Category, id=category_id)\r\n    products = Product.objects.filter(categories=category)\r\n\r\n    paginator = Paginator(products, 10)  # 10 products per page\r\n    page_number = request.GET.get('page')\r\n    page_obj = paginator.get_page(page_number)\r\n\r\n    stats = products.aggregate(\r\n        max_price=Max('price'),\r\n        min_price=Min('price'),\r\n        avg_price=Avg('price'),\r\n        total_value=Sum(F('price') * F('quantity'))\r\n    )\r\n\r\n    context = {\r\n        'category': category,\r\n        'products': page_obj,\r\n        'stats': stats,\r\n    }\r\n    return render(request, 'category_products.html', context)\r\ndef category_products_page(request, category_id):\r\n    return render(request, 'category_products.html', {'category_id': category_id})\r\n\r\ndef product_detail(request, product_id):\r\n    # product = get_object_or_404(Product, id=product_id)\r\n    # data = {\r\n    #     'id': product.id,\r\n    #     'name': product.name,\r\n    #     'description': product.description,\r\n    #     'price': float(product.price),\r\n    #     'quantity': product.quantity,\r\n    #     'categories': list(product.categories.values_list('name', flat=True)),\r\n    #     'image_url': product.image.url if product.image else None\r\n    # }\r\n    # return JsonResponse(data)\r\n\r\n    product = get_object_or_404(Product, id=product_id)\r\n    total_value = product.price * product.quantity\r\n    context = {\r\n        'product': product,\r\n        'total_value': total_value,\r\n    }\r\n    return render(request, 'product_detail.html', {'product': product})\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/store/views.py b/store/views.py
--- a/store/views.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/store/views.py	(date 1729182695776)
@@ -11,10 +11,10 @@
 def all_categories(request):
     categories = Category.objects.filter(parent__isnull=True).annotate(
         product_count=Count('products', distinct=True) +
-                      Count('children__products', distinct=True) +
-                      Count('children__children__products', distinct=True)
-    ).values('id', 'name', 'product_count')
-    return JsonResponse(list(categories), safe=False)
+                      Count('children__products', distinct=True)
+    )
+    return render(request, 'all_categories.html', {'categories': categories})
+
 
 def category_products(request, category_id):
     category = get_object_or_404(Category, id=category_id)
@@ -41,18 +41,6 @@
     return render(request, 'category_products.html', {'category_id': category_id})
 
 def product_detail(request, product_id):
-    # product = get_object_or_404(Product, id=product_id)
-    # data = {
-    #     'id': product.id,
-    #     'name': product.name,
-    #     'description': product.description,
-    #     'price': float(product.price),
-    #     'quantity': product.quantity,
-    #     'categories': list(product.categories.values_list('name', flat=True)),
-    #     'image_url': product.image.url if product.image else None
-    # }
-    # return JsonResponse(data)
-
     product = get_object_or_404(Product, id=product_id)
     total_value = product.price * product.quantity
     context = {
Index: djangoProject/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for djangoProject project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\n\r\nfrom django.contrib import admin\r\nfrom django.urls import path, include\r\nfrom django.shortcuts import redirect\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\n\r\nurlpatterns = [\r\n    path('', lambda request: redirect('store_home')),\r\n    path('admin/', admin.site.urls),\r\n    path('store/', include('store.urls')),\r\n    path('order/', include('order.urls')),\r\n]\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/djangoProject/urls.py b/djangoProject/urls.py
--- a/djangoProject/urls.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/djangoProject/urls.py	(date 1729176741021)
@@ -26,6 +26,8 @@
     path('admin/', admin.site.urls),
     path('store/', include('store.urls')),
     path('order/', include('order.urls')),
+
+    path('users/', include('users.urls')),
 ]
 if settings.DEBUG:
     urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
\ No newline at end of file
Index: templates/all_categories.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/all_categories.html b/templates/all_categories.html
new file mode 100644
--- /dev/null	(date 1729182791464)
+++ b/templates/all_categories.html	(date 1729182791464)
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>All Categories</title>
+</head>
+<body>
+    <h1>All Categories</h1>
+    
+    <ul>
+    {% for category in categories %}
+        <li>
+            <a href="{% url 'category_products' category.id %}">{{ category.name }}</a>
+            ({{ category.product_count }} product{{ category.product_count|pluralize }})
+        </li>
+    {% empty %}
+        <li>No categories found.</li>
+    {% endfor %}
+    </ul>
+
+    <p><a href="{% url 'store_home' %}">Back to Home</a></p>
+</body>
+</html>
\ No newline at end of file
Index: templates/product_detail.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>{{ product.name }} - Product Detail</title>\r\n</head>\r\n<body>\r\n    <h1>{{ product.name }}</h1>\r\n    <p>Description: {{ product.description }}</p>\r\n    <p>Price: ${{ product.price }}</p>\r\n    <p>Quantity: {{ product.quantity }}</p>\r\n    <p>Total Value: ${{ product.price|floatformat:2 }}</p>\r\n    <p>Categories: {{ product.categories.all|join:\", \" }}</p>\r\n    {% if product.image %}\r\n        <img src=\"{{ product.image.url }}\" alt=\"{{ product.name }}\">\r\n    {% endif %}\r\n    <p><a href=\"{% url 'all_categories' %}\">Back to Categories</a></p>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/product_detail.html b/templates/product_detail.html
--- a/templates/product_detail.html	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/templates/product_detail.html	(date 1729181928551)
@@ -15,6 +15,6 @@
     {% if product.image %}
         <img src="{{ product.image.url }}" alt="{{ product.name }}">
     {% endif %}
-    <p><a href="{% url 'all_categories' %}">Back to Categories</a></p>
+    <p><a href="{% url 'all_categories' %}">Back to categories</a></p>
 </body>
 </html>
\ No newline at end of file
Index: users/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/users/forms.py b/users/forms.py
new file mode 100644
--- /dev/null	(date 1729173046683)
+++ b/users/forms.py	(date 1729173046683)
@@ -0,0 +1,12 @@
+from django.contrib.auth.forms import UserCreationForm, UserChangeForm
+from .models import CustomUser
+
+class CustomUserCreationForm(UserCreationForm):
+    class Meta:
+        model = CustomUser
+        fields = ('username', 'email', 'phone_number', 'date_of_birth')
+
+class CustomUserChangeForm(UserChangeForm):
+    class Meta:
+        model = CustomUser
+        fields = ('username', 'email', 'phone_number', 'date_of_birth')
\ No newline at end of file
Index: order/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\n\r\n# Register your models here.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/order/admin.py b/order/admin.py
--- a/order/admin.py	(revision 9994686f7ee096e9bb387c3172a020cbbc3b347b)
+++ b/order/admin.py	(date 1729169516183)
@@ -1,3 +1,8 @@
 from django.contrib import admin
+from .models import UserCart
 
-# Register your models here.
+@admin.register(UserCart)
+class UserCartAdmin(admin.ModelAdmin):
+    list_display = ('user', 'created_at')
+    list_filter = ('created_at',)
+    search_fields = ('user__username',)
\ No newline at end of file
